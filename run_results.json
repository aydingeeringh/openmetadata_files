{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-12-07T14:36:39.810728Z", "invocation_id": "7e73c485-f6f8-4961-aa9f-8ed838b81107", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:35.801925Z", "completed_at": "2024-12-07T14:36:35.807666Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:35.807899Z", "completed_at": "2024-12-07T14:36:35.807910Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006552219390869141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.raw_person", "compiled": true, "compiled_code": "\n\nSELECT\n  ROW_NUMBER() OVER (ORDER BY \"FirstName\", \"Surname\", \"DateOfBirth\") as \"person_id\",\n  \"Title\" as \"title\",\n  \"Gender\" as \"gender\",\n  \"FirstName\" as \"firstname\",\n  \"Initials\" as \"initials\",\n  \"Surname\" as \"surname\",\n  \"DateOfBirth\" as \"dateofbirth\",\n  \"IdentificationValue\" as \"identificationvalue\",\n  \"AddressLine1\" as \"addressline1\",\n  \"AddressLine2\" as \"addressline2\",\n  \"AddressLine3\" as \"addressline3\" \nFROM \"test_harness\".\"public\".\"test_data\"", "relation_name": "\"test_harness\".\"models\".\"raw_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:35.809104Z", "completed_at": "2024-12-07T14:36:35.810175Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:35.810375Z", "completed_at": "2024-12-07T14:36:35.810378Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0017249584197998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.postgres_example.refgender", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:35.811249Z", "completed_at": "2024-12-07T14:36:35.812244Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:35.812430Z", "completed_at": "2024-12-07T14:36:35.812433Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0015888214111328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.postgres_example.reftitlegender", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:35.813267Z", "completed_at": "2024-12-07T14:36:37.512301Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.512892Z", "completed_at": "2024-12-07T14:36:37.512906Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.884343147277832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.parsing_person", "compiled": true, "compiled_code": "\n\nSELECT\n    \n    \n    person_id\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n\n    END as title\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n\n    END as gender\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n\n    END as firstname\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n\n    END as initials\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n\n    END as surname\n\n    ,\n    \n    \n    dateofbirth\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n\n    END as identificationvalue\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n\n    END as addressline1\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n\n    END as addressline2\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n\n    END as addressline3\n\n    \n    \nFROM \"test_harness\".\"models\".\"raw_person\"", "relation_name": "\"test_harness\".\"models\".\"parsing_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.701837Z", "completed_at": "2024-12-07T14:36:37.715274Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.715879Z", "completed_at": "2024-12-07T14:36:37.715888Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015706777572631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_raw_person_identificationvalue.dc97173cfb", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_raw_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.718378Z", "completed_at": "2024-12-07T14:36:37.725652Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.726105Z", "completed_at": "2024-12-07T14:36:37.726112Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008964061737060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_dob_check_raw_person_identificationvalue__dateofbirth.d91804c2ed", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        -- Ensure ID is not null and has correct length\n        (identificationvalue is not null and\n        -- Ensure DOB is not null and is a valid date\n        dateofbirth is not null and dateofbirth::date is not null and\n        -- Compare ID prefix with formatted DOB\n        substring(identificationvalue, 1, 6) != to_char(dateofbirth::date, 'YYMMDD'))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_dob_check_raw_person_identificationvalue__dateofbirth\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.728124Z", "completed_at": "2024-12-07T14:36:37.736760Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.737161Z", "completed_at": "2024-12-07T14:36:37.737167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0099639892578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_raw_person_person_id.d57b360f75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"raw_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_raw_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.738821Z", "completed_at": "2024-12-07T14:36:37.743436Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.743865Z", "completed_at": "2024-12-07T14:36:37.743871Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005800962448120117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_addressline1.be2d09f814", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        addressline1 is not null\n        and addressline1 != \n            TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_addressline1\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.745479Z", "completed_at": "2024-12-07T14:36:37.749109Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.749399Z", "completed_at": "2024-12-07T14:36:37.749402Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0046498775482177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_addressline2.3ce7d1c257", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        addressline2 is not null\n        and addressline2 != \n            TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_addressline2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.750736Z", "completed_at": "2024-12-07T14:36:37.755196Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.755491Z", "completed_at": "2024-12-07T14:36:37.755495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005383968353271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_addressline3.d493a309ac", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        addressline3 is not null\n        and addressline3 != \n            TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_addressline3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.756801Z", "completed_at": "2024-12-07T14:36:37.759877Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.760172Z", "completed_at": "2024-12-07T14:36:37.760175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003979682922363281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_firstname.725bb208fa", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        firstname is not null\n        and firstname != \n            TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_firstname\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.761454Z", "completed_at": "2024-12-07T14:36:37.764399Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.764652Z", "completed_at": "2024-12-07T14:36:37.764655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003824949264526367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_gender.a8c47018d3", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        gender is not null\n        and gender != \n            TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_gender\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.765814Z", "completed_at": "2024-12-07T14:36:37.768323Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.768553Z", "completed_at": "2024-12-07T14:36:37.768555Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003267049789428711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_identificationvalue.ab9cf56c56", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        identificationvalue is not null\n        and identificationvalue != \n            TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.769612Z", "completed_at": "2024-12-07T14:36:37.772348Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.772601Z", "completed_at": "2024-12-07T14:36:37.772604Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0034949779510498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_initials.d888edfc65", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        initials is not null\n        and initials != \n            TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_initials\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.773661Z", "completed_at": "2024-12-07T14:36:37.776015Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.776226Z", "completed_at": "2024-12-07T14:36:37.776229Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0030448436737060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_surname.2eca925e08", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        surname is not null\n        and surname != \n            TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_surname\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.777189Z", "completed_at": "2024-12-07T14:36:37.779535Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.779734Z", "completed_at": "2024-12-07T14:36:37.779737Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003000020980834961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_title.933c96f33e", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        title is not null\n        and title != \n            TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_title\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.780640Z", "completed_at": "2024-12-07T14:36:37.784149Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:37.784358Z", "completed_at": "2024-12-07T14:36:37.784360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004147052764892578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_raw_person_person_id.12890fd1b5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"raw_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_raw_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:37.785269Z", "completed_at": "2024-12-07T14:36:39.529086Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.529445Z", "completed_at": "2024-12-07T14:36:39.529451Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9287376403808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.cleansing_person", "compiled": true, "compiled_code": "SELECT\n    \n    \n    person_id\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(title), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as title\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(gender), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as gender\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(firstname), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as firstname\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(initials), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as initials\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(surname), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as surname\n\n    ,\n    \n    \n    dateofbirth\n    ,\n    \n    \n    identificationvalue\n    ,\n    \n    \n    \n    UPPER(REGEXP_REPLACE(TRIM(addressline1), '[^a-zA-Z\\s]', '', 'g')) as addressline1\n\n    ,\n    \n    \n    \n    UPPER(REGEXP_REPLACE(TRIM(addressline2), '[^a-zA-Z\\s]', '', 'g')) as addressline2\n\n    ,\n    \n    \n    \n    UPPER(REGEXP_REPLACE(TRIM(addressline3), '[^a-zA-Z\\s]', '', 'g')) as addressline3\n\n    \n    \nFROM \"test_harness\".\"models\".\"parsing_person\"\nORDER BY person_id", "relation_name": "\"test_harness\".\"models\".\"cleansing_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.717454Z", "completed_at": "2024-12-07T14:36:39.725131Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.725706Z", "completed_at": "2024-12-07T14:36:39.725713Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009776830673217773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_parsing_person_identificationvalue.1f88aa9d9e", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"parsing_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_parsing_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.728253Z", "completed_at": "2024-12-07T14:36:39.734124Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.734559Z", "completed_at": "2024-12-07T14:36:39.734564Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007458925247192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_parsing_person_person_id.ac27bf437a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"parsing_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_parsing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.736805Z", "completed_at": "2024-12-07T14:36:39.741853Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.742303Z", "completed_at": "2024-12-07T14:36:39.742308Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006698131561279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_parsing_person_person_id.4b1e7ea03e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"parsing_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_parsing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.744189Z", "completed_at": "2024-12-07T14:36:39.749490Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.749858Z", "completed_at": "2024-12-07T14:36:39.749863Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006484270095825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.enhancing_person", "compiled": true, "compiled_code": "\n\nWITH gender_match AS (\n    SELECT \n        a.*,\n        UPPER(b.normalized_name) as matched_gender,\n        \n    SIMILARITY(LOWER(a.gender), LOWER(b.gender_name))\n as similarity_score,\n        ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY \n    SIMILARITY(LOWER(a.gender), LOWER(b.gender_name))\n DESC) as rn\n    FROM \"test_harness\".\"models\".\"cleansing_person\" a\n    LEFT JOIN \"test_harness\".\"models\".\"refgender\" b\n        ON a.gender IS NOT NULL \n        AND TRIM(a.gender) != ''\n        AND \n    SIMILARITY(LOWER(a.gender), LOWER(b.gender_name))\n > 0.3\n)\n\nSELECT\n    \"person_id\",\n    \"title\",\n    COALESCE(matched_gender, gender) as \"gender\",\n    \"firstname\",\n    \"initials\",\n    \"surname\",\n    \"dateofbirth\",\n    \"identificationvalue\",\n    \"addressline1\",\n    \"addressline2\",\n    \"addressline3\"\nFROM gender_match\nWHERE rn = 1\nORDER BY \"person_id\"", "relation_name": "\"test_harness\".\"models\".\"enhancing_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.751862Z", "completed_at": "2024-12-07T14:36:39.755496Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.755827Z", "completed_at": "2024-12-07T14:36:39.755831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004888057708740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_cleansing_person_identificationvalue.a41feaca50", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"cleansing_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_cleansing_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.757315Z", "completed_at": "2024-12-07T14:36:39.762494Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.762806Z", "completed_at": "2024-12-07T14:36:39.762810Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006178140640258789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_cleansing_person_person_id.f1601e4101", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"cleansing_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_cleansing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.764078Z", "completed_at": "2024-12-07T14:36:39.799567Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.799777Z", "completed_at": "2024-12-07T14:36:39.799781Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036296844482421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_cleansing_person_person_id.8306d2bcca", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"cleansing_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_cleansing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.800801Z", "completed_at": "2024-12-07T14:36:39.803029Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.803240Z", "completed_at": "2024-12-07T14:36:39.803242Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002929210662841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_enhancing_person_identificationvalue.477b6b7221", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"enhancing_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_enhancing_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.804174Z", "completed_at": "2024-12-07T14:36:39.806511Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.806707Z", "completed_at": "2024-12-07T14:36:39.806709Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002969980239868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_enhancing_person_person_id.e372073289", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"enhancing_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_enhancing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:36:39.807559Z", "completed_at": "2024-12-07T14:36:39.809629Z"}, {"name": "execute", "started_at": "2024-12-07T14:36:39.809802Z", "completed_at": "2024-12-07T14:36:39.809804Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0026400089263916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_enhancing_person_person_id.f185685f7f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"enhancing_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_enhancing_person_person_id\""}], "elapsed_time": 9.691394805908203, "args": {"partial_parse_file_diff": true, "compile": true, "send_anonymous_usage_stats": true, "enable_legacy_logger": false, "strict_mode": false, "empty_catalog": false, "partial_parse": true, "log_format": "default", "show_resource_report": false, "static_parser": true, "quiet": false, "cache_selected_only": false, "warn_error_options": {"include": [], "exclude": []}, "log_path": "/Users/aydingeeringh/Developer/dbt/postgres_example/logs", "profiles_dir": "/Users/aydingeeringh/.dbt", "populate_cache": true, "macro_debugging": false, "print": true, "write_json": true, "project_dir": "/Users/aydingeeringh/Developer/dbt/postgres_example", "version_check": true, "introspect": true, "static": false, "select": [], "use_colors": true, "require_explicit_package_overrides_for_builtin_materializations": true, "exclude": [], "printer_width": 80, "indirect_selection": "eager", "vars": {}, "which": "generate", "defer": false, "source_freshness_run_project_hooks": false, "log_file_max_bytes": 10485760, "invocation_command": "dbt docs generate", "require_resource_names_without_spaces": false, "use_colors_file": true, "log_level": "info", "log_level_file": "debug", "favor_state": false, "log_format_file": "debug"}}