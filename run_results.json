{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.2", "generated_at": "2024-12-07T14:21:15.392425Z", "invocation_id": "773cb1a2-2ca9-4ee1-8413-66b91827734e", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:11.457353Z", "completed_at": "2024-12-07T14:21:11.464704Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:11.464963Z", "completed_at": "2024-12-07T14:21:11.464976Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008432865142822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.raw_person", "compiled": true, "compiled_code": "\n\nSELECT\n  ROW_NUMBER() OVER (ORDER BY \"FirstName\", \"Surname\", \"DateOfBirth\") as \"person_id\",\n  \"Title\" as \"title\",\n  \"Gender\" as \"gender\",\n  \"FirstName\" as \"firstname\",\n  \"Initials\" as \"initials\",\n  \"Surname\" as \"surname\",\n  \"DateOfBirth\" as \"dateofbirth\",\n  \"IdentificationValue\" as \"identificationvalue\",\n  \"AddressLine1\" as \"addressline1\",\n  \"AddressLine2\" as \"addressline2\",\n  \"AddressLine3\" as \"addressline3\" \nFROM \"test_harness\".\"public\".\"test_data\"", "relation_name": "\"test_harness\".\"models\".\"raw_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:11.466680Z", "completed_at": "2024-12-07T14:21:11.468239Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:11.468661Z", "completed_at": "2024-12-07T14:21:11.468667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0029540061950683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.postgres_example.refgender", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:11.469903Z", "completed_at": "2024-12-07T14:21:11.471466Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:11.471869Z", "completed_at": "2024-12-07T14:21:11.471875Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.002668619155883789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.postgres_example.reftitlegender", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:11.473315Z", "completed_at": "2024-12-07T14:21:13.163135Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.163577Z", "completed_at": "2024-12-07T14:21:13.163586Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.9081661701202393, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.parsing_person", "compiled": true, "compiled_code": "\n\nSELECT\n    \n    \n    person_id\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n\n    END as title\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n\n    END as gender\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n\n    END as firstname\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n\n    END as initials\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n\n    END as surname\n\n    ,\n    \n    \n    dateofbirth\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n\n    END as identificationvalue\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n\n    END as addressline1\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n\n    END as addressline2\n\n    ,\n    \n    \n    \n    CASE \n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, '(.)\\1{5,}') \n        THEN REGEXP_REPLACE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, '(.)\\1+', '\\1', 'g')  -- single char repetition\n        WHEN REGEXP_LIKE(\n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, '(.+?)\\1+') \n        THEN REGEXP_REPLACE(\n            \n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n, \n            '^(.+?)\\1+$',  -- match the entire string if it's a repeated pattern\n            '\\1',\n            'g'\n        )  -- pattern repetition\n        ELSE \n    TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n\n    END as addressline3\n\n    \n    \nFROM \"test_harness\".\"models\".\"raw_person\"", "relation_name": "\"test_harness\".\"models\".\"parsing_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.384419Z", "completed_at": "2024-12-07T14:21:13.390930Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.391263Z", "completed_at": "2024-12-07T14:21:13.391269Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008193731307983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_raw_person_identificationvalue.dc97173cfb", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_raw_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.392509Z", "completed_at": "2024-12-07T14:21:13.395353Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.395647Z", "completed_at": "2024-12-07T14:21:13.395651Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003718137741088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_dob_check_raw_person_identificationvalue__dateofbirth.d91804c2ed", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        -- Ensure ID is not null and has correct length\n        (identificationvalue is not null and\n        -- Ensure DOB is not null and is a valid date\n        dateofbirth is not null and dateofbirth::date is not null and\n        -- Compare ID prefix with formatted DOB\n        substring(identificationvalue, 1, 6) != to_char(dateofbirth::date, 'YYMMDD'))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_dob_check_raw_person_identificationvalue__dateofbirth\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.396763Z", "completed_at": "2024-12-07T14:21:13.403833Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.404120Z", "completed_at": "2024-12-07T14:21:13.404125Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007892370223999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_raw_person_person_id.d57b360f75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"raw_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_raw_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.405280Z", "completed_at": "2024-12-07T14:21:13.408729Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.409002Z", "completed_at": "2024-12-07T14:21:13.409008Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00426173210144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_addressline1.be2d09f814", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        addressline1 is not null\n        and addressline1 != \n            TRIM(REGEXP_REPLACE(COALESCE(addressline1, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_addressline1\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.410125Z", "completed_at": "2024-12-07T14:21:13.412658Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.412884Z", "completed_at": "2024-12-07T14:21:13.412887Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0032639503479003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_addressline2.3ce7d1c257", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        addressline2 is not null\n        and addressline2 != \n            TRIM(REGEXP_REPLACE(COALESCE(addressline2, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_addressline2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.413886Z", "completed_at": "2024-12-07T14:21:13.417891Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.418274Z", "completed_at": "2024-12-07T14:21:13.418279Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004900217056274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_addressline3.d493a309ac", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        addressline3 is not null\n        and addressline3 != \n            TRIM(REGEXP_REPLACE(COALESCE(addressline3, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_addressline3\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.420016Z", "completed_at": "2024-12-07T14:21:13.424204Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.424444Z", "completed_at": "2024-12-07T14:21:13.424447Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005227088928222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_firstname.725bb208fa", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        firstname is not null\n        and firstname != \n            TRIM(REGEXP_REPLACE(COALESCE(firstname, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_firstname\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.425645Z", "completed_at": "2024-12-07T14:21:13.428363Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.428606Z", "completed_at": "2024-12-07T14:21:13.428608Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0035660266876220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_gender.a8c47018d3", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        gender is not null\n        and gender != \n            TRIM(REGEXP_REPLACE(COALESCE(gender, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_gender\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.429771Z", "completed_at": "2024-12-07T14:21:13.433110Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.433388Z", "completed_at": "2024-12-07T14:21:13.433391Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0042002201080322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_identificationvalue.ab9cf56c56", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        identificationvalue is not null\n        and identificationvalue != \n            TRIM(REGEXP_REPLACE(COALESCE(identificationvalue, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.434625Z", "completed_at": "2024-12-07T14:21:13.437414Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.437694Z", "completed_at": "2024-12-07T14:21:13.437697Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0036339759826660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_initials.d888edfc65", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        initials is not null\n        and initials != \n            TRIM(REGEXP_REPLACE(COALESCE(initials, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_initials\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.438986Z", "completed_at": "2024-12-07T14:21:13.443357Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.443620Z", "completed_at": "2024-12-07T14:21:13.443623Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005251646041870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_surname.2eca925e08", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        surname is not null\n        and surname != \n            TRIM(REGEXP_REPLACE(COALESCE(surname, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_surname\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.444803Z", "completed_at": "2024-12-07T14:21:13.447471Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.447724Z", "completed_at": "2024-12-07T14:21:13.447727Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003470897674560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.spaces_check_raw_person_title.933c96f33e", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"raw_person\"\n    where \n        title is not null\n        and title != \n            TRIM(REGEXP_REPLACE(COALESCE(title, ''), '\\s+', ' '))\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"spaces_check_raw_person_title\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.448883Z", "completed_at": "2024-12-07T14:21:13.452930Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:13.453170Z", "completed_at": "2024-12-07T14:21:13.453174Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004836082458496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_raw_person_person_id.12890fd1b5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"raw_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_raw_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:13.454256Z", "completed_at": "2024-12-07T14:21:15.139010Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.139583Z", "completed_at": "2024-12-07T14:21:15.139592Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8692131042480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.cleansing_person", "compiled": true, "compiled_code": "SELECT\n    \n    \n    person_id\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(title), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as title\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(gender), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as gender\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(firstname), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as firstname\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(initials), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as initials\n\n    ,\n    \n    \n    \n    UPPER(\n        REGEXP_REPLACE(\n            REGEXP_REPLACE(\n                TRIM(surname), \n                '[0-9]', '', 'g'  -- Remove numbers first\n            ),\n            '[^a-zA-Z\\s]', '', 'g'  -- Then remove special characters\n        )\n    ) as surname\n\n    ,\n    \n    \n    dateofbirth\n    ,\n    \n    \n    identificationvalue\n    ,\n    \n    \n    \n    UPPER(REGEXP_REPLACE(TRIM(addressline1), '[^a-zA-Z\\s]', '', 'g')) as addressline1\n\n    ,\n    \n    \n    \n    UPPER(REGEXP_REPLACE(TRIM(addressline2), '[^a-zA-Z\\s]', '', 'g')) as addressline2\n\n    ,\n    \n    \n    \n    UPPER(REGEXP_REPLACE(TRIM(addressline3), '[^a-zA-Z\\s]', '', 'g')) as addressline3\n\n    \n    \nFROM \"test_harness\".\"models\".\"parsing_person\"\nORDER BY person_id", "relation_name": "\"test_harness\".\"models\".\"cleansing_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.326354Z", "completed_at": "2024-12-07T14:21:15.336121Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.336743Z", "completed_at": "2024-12-07T14:21:15.336751Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011978864669799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_parsing_person_identificationvalue.1f88aa9d9e", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"parsing_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_parsing_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.339652Z", "completed_at": "2024-12-07T14:21:15.345487Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.345938Z", "completed_at": "2024-12-07T14:21:15.345943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007740974426269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_parsing_person_person_id.ac27bf437a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"parsing_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_parsing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.347949Z", "completed_at": "2024-12-07T14:21:15.354665Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.355045Z", "completed_at": "2024-12-07T14:21:15.355050Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008044004440307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_parsing_person_person_id.4b1e7ea03e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"parsing_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_parsing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.356867Z", "completed_at": "2024-12-07T14:21:15.361375Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.361864Z", "completed_at": "2024-12-07T14:21:15.361870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005928993225097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.postgres_example.enhancing_person", "compiled": true, "compiled_code": "\n\nWITH gender_match AS (\n    SELECT \n        a.*,\n        UPPER(b.normalized_name) as matched_gender,\n        \n    SIMILARITY(LOWER(a.gender), LOWER(b.gender_name))\n as similarity_score,\n        ROW_NUMBER() OVER (PARTITION BY a.person_id ORDER BY \n    SIMILARITY(LOWER(a.gender), LOWER(b.gender_name))\n DESC) as rn\n    FROM \"test_harness\".\"models\".\"cleansing_person\" a\n    LEFT JOIN \"test_harness\".\"models\".\"refgender\" b\n        ON a.gender IS NOT NULL \n        AND TRIM(a.gender) != ''\n        AND \n    SIMILARITY(LOWER(a.gender), LOWER(b.gender_name))\n > 0.3\n)\n\nSELECT\n    \"person_id\",\n    \"title\",\n    COALESCE(matched_gender, gender) as \"gender\",\n    \"firstname\",\n    \"initials\",\n    \"surname\",\n    \"dateofbirth\",\n    \"identificationvalue\",\n    \"addressline1\",\n    \"addressline2\",\n    \"addressline3\"\nFROM gender_match\nWHERE rn = 1\nORDER BY \"person_id\"", "relation_name": "\"test_harness\".\"models\".\"enhancing_person\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.363859Z", "completed_at": "2024-12-07T14:21:15.367560Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.367911Z", "completed_at": "2024-12-07T14:21:15.367915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004953861236572266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_cleansing_person_identificationvalue.a41feaca50", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"cleansing_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_cleansing_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.369529Z", "completed_at": "2024-12-07T14:21:15.373205Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.373492Z", "completed_at": "2024-12-07T14:21:15.373495Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00472712516784668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_cleansing_person_person_id.f1601e4101", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"cleansing_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_cleansing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.374810Z", "completed_at": "2024-12-07T14:21:15.378028Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.378318Z", "completed_at": "2024-12-07T14:21:15.378321Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00412297248840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_cleansing_person_person_id.8306d2bcca", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"cleansing_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_cleansing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.379656Z", "completed_at": "2024-12-07T14:21:15.382623Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.382872Z", "completed_at": "2024-12-07T14:21:15.382875Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0038299560546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.id_check_enhancing_person_identificationvalue.477b6b7221", "compiled": true, "compiled_code": "\n\nwith failing_rows as (\n    select *\n    from \"test_harness\".\"models\".\"enhancing_person\"\n    where not (\n        identificationvalue ~ '^[A-Z]\\d{8}$'\n        or identificationvalue ~ '^[1-3]\\d{8}$'\n        or identificationvalue ~ '^[5-9]\\d{8}$'\n    )\n)\n\nselect * from failing_rows\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"id_check_enhancing_person_identificationvalue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.384039Z", "completed_at": "2024-12-07T14:21:15.387000Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.387253Z", "completed_at": "2024-12-07T14:21:15.387256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0037653446197509766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.not_null_enhancing_person_person_id.e372073289", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom \"test_harness\".\"models\".\"enhancing_person\"\nwhere person_id is null\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"not_null_enhancing_person_person_id\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-12-07T14:21:15.388421Z", "completed_at": "2024-12-07T14:21:15.391026Z"}, {"name": "execute", "started_at": "2024-12-07T14:21:15.391257Z", "completed_at": "2024-12-07T14:21:15.391260Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003389120101928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.postgres_example.unique_enhancing_person_person_id.f185685f7f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"test_harness\".\"models\".\"enhancing_person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "relation_name": "\"test_harness\".\"models_test_failures\".\"unique_enhancing_person_person_id\""}], "elapsed_time": 9.628511905670166, "args": {"cache_selected_only": false, "enable_legacy_logger": false, "log_level": "info", "exclude": [], "profiles_dir": "/Users/aydingeeringh/.dbt", "inject_ephemeral_ctes": true, "log_level_file": "debug", "partial_parse": true, "require_explicit_package_overrides_for_builtin_materializations": true, "require_resource_names_without_spaces": false, "log_path": "/Users/aydingeeringh/Developer/dbt/postgres_example/logs", "log_file_max_bytes": 10485760, "project_dir": "/Users/aydingeeringh/Developer/dbt/postgres_example", "favor_state": false, "partial_parse_file_diff": true, "print": true, "defer": false, "quiet": false, "use_colors_file": true, "send_anonymous_usage_stats": true, "output": "text", "show_resource_report": false, "select": [], "vars": {}, "macro_debugging": false, "strict_mode": false, "use_colors": true, "version_check": true, "write_json": true, "invocation_command": "dbt compile", "empty": false, "which": "compile", "static_parser": true, "introspect": true, "log_format": "default", "printer_width": 80, "warn_error_options": {"include": [], "exclude": []}, "log_format_file": "debug", "indirect_selection": "eager", "populate_cache": true, "source_freshness_run_project_hooks": false}}